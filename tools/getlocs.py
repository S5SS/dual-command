#!/usr/bin/env python3
# Modified binary regex searcher
# Compiles a dictionary of localization IDs to localized text
import sys
import re
import os
import os.path

locPath = 'loc'
races = ['vaygr', 'hiigaran', 'taiidan', 'kushan']
scripts = ['def_build.lua', '']

def file_find(filepath, re_pattern):
	try:
		with open(filepath, 'rb') as f:
			content = str(f.read(), encoding='ascii')
	except:
		print('The file "%s" could not be found/opened.' % file_path)

	try:
		return re.search(re_pattern, content).group(1)
	except:
		return None

def main(*args):
	locDb = {}

	# Load localization db
	for root, subdirs, subfiles in os.walk(locPath):
		for filename in subfiles:
			filepath = os.path.join(root, filename)
			with open(filepath, 'r') as f:
				for line in (line.strip() for line in f.readlines() if line.strip() and line[0].isdigit()):
					try:
						key, value = line.split(maxsplit=1)
					except:
						continue
						
					value = value.translate(str.maketrans({
									  '"':  '\\"'}))
					locDb['$' + key] = value
	
	# Show results to user
	print('-- Used by 2.4 to set build times')
	print('-- Generated by getlocs.py')
	print('localization = {')
	for key, value in locDb.items():
		print('\t["%s"] = "%s",' % (key, value))

	print('}')
	
	return 0


if __name__ == '__main__':
	rc = main(*sys.argv)
	sys.exit(rc)
